package ch07_map;

import java.util.*;

public class Direction {
/* 머쓱이는 RPG게임을 하고 있습니다. 게임에는 up, down, left, right 방향키가 있으며 각 키를 누르면 위, 아래, 왼쪽, 오른쪽으로 한 칸씩 이동합니다. 예를 들어 [0,0]에서 up을 누른다면 캐릭터의 좌표는 [0, 1], down을 누른다면 [0, -1], left를 누른다면 [-1, 0], right를 누른다면 [1, 0]입니다. 머쓱이가 입력한 방향키의 배열 keyinput와 맵의 크기 board이 매개변수로 주어집니다. 캐릭터는 항상 [0,0]에서 시작할 때 키 입력이 모두 끝난 뒤에 캐릭터의 좌표 [x, y]를 return하도록 solution 함수를 완성해주세요.
 * [0, 0]은 board의 정 중앙에 위치합니다. 예를 들어 board의 가로 크기가 9라면 캐릭터는 왼쪽으로 최대 [-4, 0]까지 오른쪽으로 최대 [4, 0]까지 이동할 수 있습니다.
 */
	public static int[] solution(String[] keyinput, int[] board) {
        int[] answer = {};
        
        Map<String, int[]> hm = new HashMap<String, int[]>();
        hm.put("up", new int[] {0,1});
        hm.put("down", new int[] {0,-1});
        hm.put("left", new int[] {-1,0});
        hm.put("right", new int[] {1,0});
        
        // 초기위치
        int[] now = {0, 0};
        
        for(int i=0; i<keyinput.length; i++) {
        	int[] dir = hm.get(keyinput[i]);
        	int[] next = {now[0]+dir[0], now[1]+dir[1]};
        	if(next[0]>=-(board[0]/2) && next[0]<=(board[0]/2) && next[1]>=-(board[1]/2) && next[1]<=(board[1]/2)) {
        		now[0] = next[0];
        		now[1] = next[1];
        	}
        	else {
        		continue;
        	}
        }
        answer = new int[2];
        answer[0] = now[0];
        answer[1] = now[1];
        
        return answer;
    }
	
	public static void main(String[] args) {
		String[] keyinput1 = {"left", "right", "up", "right", "right"};
		int[] board1 = {11,11};
		String[] keyinput2 = {"down", "down", "down", "down", "down"};
		int[] board2 = {7,9};
		String[] keyinput3 = {"down", "down", "up", "up", "up"};
		int[] board3 = {3,3};
		
		
		System.out.println(Arrays.toString(solution(keyinput1, board1)));
		System.out.println(Arrays.toString(solution(keyinput2, board2)));
		System.out.println(Arrays.toString(solution(keyinput3, board3)));
	}

}
